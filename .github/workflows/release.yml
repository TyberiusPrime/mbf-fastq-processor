name: Release Workflow
env:
  # The project name specified in your Cargo.toml
  PROJECT_NAME: mbf_fastq_processor

on:
  push:
    tags:
      - 'v*' # Triggers on any tag that starts with 'v'

permissions:
  contents: write  # Allows creating releases and uploading assets

jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify tag matches version
        run: |
          # Extract version from Cargo.toml
          BINARY_REPORTED_VERSION=v$(grep '^version' Cargo.toml | head -n1 | cut -d '"' -f2)
          echo "Found version: $BINARY_REPORTED_VERSION"
          # Check if the pushed tag matches the version
          if [ "${{ github.ref }}" != "refs/tags/$BINARY_REPORTED_VERSION" ]; then
            echo "Tag does not match version. Aborting."
            exit 1
          fi

      - name: Install Nix
        uses: cachix/install-nix-action@v27
      - name: Test
        run: nix build .#test

      - name: Build
        run: nix build .#mbf-fastq-processor_other_linux

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./result/bin/mbf_fastq_processor


  build_windows:
    # Set the job to run on the platform specified by the matrix below
    runs-on: ${{ matrix.runner }}
    needs: build

    # Define the build matrix for cross-compilation
    strategy:
      matrix:
        include:
          # - name: linux-amd64
          #   runner: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
          - name: win-amd64
            runner: windows-latest
            target: x86_64-pc-windows-msvc
          # - name: macos-amd64
          #   runner: macos-latest
          #   target: x86_64-apple-darwin
          # - name: macos-arm64
          #   runner: macos-latest
          #   target: aarch64-apple-darwin

    # The steps to run for each matrix item
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"

      - name: Setup Cache
        uses: Swatinem/rust-cache@v2

      - name: Build Binary
        run: CARGO_PROFILE_RELEASE_debug="0" cargo build --verbose --locked --release --target ${{ matrix.target }}

      - name: Release Binary
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          BIN_SUFFIX=""
          if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
            BIN_SUFFIX=".exe"
          fi

          # The built binary output location
          BIN_OUTPUT="target/${{ matrix.target }}/release/${PROJECT_NAME}${BIN_SUFFIX}"

          # Define a better name for the final binary
          # BIN_RELEASE="${PROJECT_NAME}-${{ matrix.name }}${BIN_SUFFIX}"
          # BIN_RELEASE_VERSIONED="${PROJECT_NAME}-${{ github.ref_name }}-${{ matrix.name }}${BIN_SUFFIX}"

          # Move the built binary where you want it
          gh release upload ${{ github.ref_name }} "target/${{ matrix.target }}/release/${PROJECT_NAME}${BIN_SUFFIX}"

