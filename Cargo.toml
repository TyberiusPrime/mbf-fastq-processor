[package]
name = "mbf-fastq-processor"
version = "0.8.0"
edition = "2024"
authors = ["Florian Finkernagel <finkernagel@imt.uni-marburg.de>"]
homepage = "https://github.com/TyberiusPrime/mbf-fastq-processor"

[dependencies]
anyhow = "1.0.89"
#async-stream = "0.3.6"
bio = "2.0.3"
crossbeam = "0.8.4"
csv = "1.3.1"
enum_dispatch = "0.3.13"
ex = "0.1.3"
#fastq = "0.6.0"
# I have benchmarked zlib-rs in 08f1b7e00a28413455e5fde5b752aa960de0f9d3
# to be very slightly faster than gz_zlib-ng-compat
# in 063d53bcc88f3ead1adfd73e3932e922d39f2496,
# and though there's a lot of unsafe in zlib-rs it's probably better than the old C code.
# rust_backend = miniz_oxide is fully safe. Benchmark: says +30% runtime though (f1e8a4ff885d35a5a3c14227e302d955fee4ec0e),
# so we use with zlib-rs for now
flate2 = {version = "1", features=["zlib-rs"]}
hex = "0.4.3"
human-panic = "2.0.2"
indexmap = "2.9.0"
itertools = "0.14.0"
json_value_merge = "2.0.1"
memchr = "2.7.4"
niffler = {version = "3.0"}
noodles = { version = "0.101.0", features = ["bam"] }
num_cpus = "1.16.0"
once_cell = "1.20.2"
rand = "0.9.1"
rand_chacha = "0.9"
regex = "1.11.1"
#scalable_cuckoo_filter = "0.3.2"
scalable_cuckoo_filter = "0.4.0"
serde = {version = "1.0.210", features=["derive"]}
serde_json = "1.0.132"
serde_valid = "1.0"
sha2 = "0.10.8"
strum_macros = "0.27.1"
tempfile = "3.13.0"
toml = "0.9.5"
zstd = "0.13.2"
nix = "0.30.1"


[profile.release]
debug = 1

[dev-dependencies]
function_name="0.3.0"
walkdir = "2.5.0"

